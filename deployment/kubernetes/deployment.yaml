# Alert Triage System - Kubernetes Deployment
apiVersion: v1
kind: Namespace
metadata:
  name: alert-triage
  labels:
    name: alert-triage
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: alert-triage-config
  namespace: alert-triage
data:
  config.yaml: |
    app:
      name: "Alert Triage System"
      version: "1.0.0"
    logging:
      level: INFO
      structured: true
    coral_protocol:
      max_message_history: 1000
      heartbeat_interval: 30
    agents:
      alert_receiver:
        max_queue_size: 1000
      false_positive_checker:
        confidence_threshold: 0.7
    api:
      webhook:
        enabled: true
        host: 0.0.0.0
        port: 8080
      rest:
        enabled: true
        port: 8081
    metrics:
      enabled: true
      prometheus_port: 9090
---
apiVersion: v1
kind: Secret
metadata:
  name: alert-triage-secrets
  namespace: alert-triage
type: Opaque
data:
  webhook-secret: YWxlcnR0cmlhZ2Utc2VjcmV0LTEyMw==  # base64 encoded
  jwt-secret: and0LXNlY3JldC1hbGVydHRyaWFnZQ==
  redis-password: YWxlcnR0cmlhZ2UxMjM=
  postgres-password: YWxlcnR0cmlhZ2UxMjM=
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: alert-triage-app
  namespace: alert-triage
  labels:
    app: alert-triage
    component: main
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: alert-triage
      component: main
  template:
    metadata:
      labels:
        app: alert-triage
        component: main
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: alert-triage
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: alert-triage
        image: alert-triage:latest
        imagePullPolicy: Always
        ports:
        - name: webhook
          containerPort: 8080
          protocol: TCP
        - name: api
          containerPort: 8081
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: CONFIG_PATH
          value: "/app/config/config.yaml"
        - name: WEBHOOK_SECRET
          valueFrom:
            secretKeyRef:
              name: alert-triage-secrets
              key: webhook-secret
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: alert-triage-secrets
              key: jwt-secret
        - name: REDIS_HOST
          value: "alert-triage-redis"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: alert-triage-secrets
              key: redis-password
        - name: POSTGRES_HOST
          value: "alert-triage-postgres"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: alert-triage-secrets
              key: postgres-password
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: webhook
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: webhook
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        volumeMounts:
        - name: config
          mountPath: /app/config
          readOnly: true
        - name: data
          mountPath: /app/data
        - name: logs
          mountPath: /app/logs
      volumes:
      - name: config
        configMap:
          name: alert-triage-config
      - name: data
        persistentVolumeClaim:
          claimName: alert-triage-data
      - name: logs
        emptyDir: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - alert-triage
              topologyKey: kubernetes.io/hostname
---
apiVersion: v1
kind: Service
metadata:
  name: alert-triage-service
  namespace: alert-triage
  labels:
    app: alert-triage
    component: main
spec:
  type: ClusterIP
  ports:
  - name: webhook
    port: 8080
    targetPort: webhook
    protocol: TCP
  - name: api
    port: 8081
    targetPort: api
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: metrics
    protocol: TCP
  selector:
    app: alert-triage
    component: main
---
apiVersion: v1
kind: Service
metadata:
  name: alert-triage-webhook
  namespace: alert-triage
  labels:
    app: alert-triage
    component: webhook
spec:
  type: LoadBalancer
  ports:
  - name: webhook
    port: 80
    targetPort: webhook
    protocol: TCP
  selector:
    app: alert-triage
    component: main
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: alert-triage-ingress
  namespace: alert-triage
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/rate-limit: "1000"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  tls:
  - hosts:
    - alert-triage.yourdomain.com
    secretName: alert-triage-tls
  rules:
  - host: alert-triage.yourdomain.com
    http:
      paths:
      - path: /webhook
        pathType: Prefix
        backend:
          service:
            name: alert-triage-service
            port:
              number: 8080
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: alert-triage-service
            port:
              number: 8081
      - path: /metrics
        pathType: Prefix
        backend:
          service:
            name: alert-triage-service
            port:
              number: 9090
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: alert-triage-data
  namespace: alert-triage
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: fast-ssd
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: alert-triage
  namespace: alert-triage
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: alert-triage
  name: alert-triage-role
rules:
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: alert-triage-rolebinding
  namespace: alert-triage
subjects:
- kind: ServiceAccount
  name: alert-triage
  namespace: alert-triage
roleRef:
  kind: Role
  name: alert-triage-role
  apiGroup: rbac.authorization.k8s.io
---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: alert-triage-redis
  namespace: alert-triage
  labels:
    app: alert-triage
    component: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: alert-triage
      component: redis
  template:
    metadata:
      labels:
        app: alert-triage
        component: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        command:
        - redis-server
        - --appendonly
        - "yes"
        - --requirepass
        - "$(REDIS_PASSWORD)"
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: alert-triage-secrets
              key: redis-password
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        volumeMounts:
        - name: redis-data
          mountPath: /data
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: alert-triage-redis-data
---
apiVersion: v1
kind: Service
metadata:
  name: alert-triage-redis
  namespace: alert-triage
  labels:
    app: alert-triage
    component: redis
spec:
  ports:
  - port: 6379
    targetPort: 6379
  selector:
    app: alert-triage
    component: redis
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: alert-triage-redis-data
  namespace: alert-triage
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
# HorizontalPodAutoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: alert-triage-hpa
  namespace: alert-triage
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: alert-triage-app
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
---
# NetworkPolicy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: alert-triage-netpol
  namespace: alert-triage
spec:
  podSelector:
    matchLabels:
      app: alert-triage
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - podSelector:
        matchLabels:
          app: prometheus
    ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 8081
    - protocol: TCP
      port: 9090
  egress:
  - to:
    - podSelector:
        matchLabels:
          component: redis
    ports:
    - protocol: TCP
      port: 6379
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53